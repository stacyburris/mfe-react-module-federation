const { merge } = require('webpack-merge'); // merge allows us to merge two webpack config files together
const HtmlWebpackPlugin = require('html-webpack-plugin'); // this plugin will generate an html file for us and inject our bundled js file into it
const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin');
const commonConfig = require('./webpack.common');
const packageJson = require('../package.json'); 

const devConfig = {
  mode: 'development',
  output: {
    publicPath: 'http://localhost:8081/', // this tells webpack where to put the bundled file when we run the build command
  },
  devServer: {
    port: 8081,
    historyApiFallback: {
      index: '/index.html',
    },
  },
  plugins: [
    new ModuleFederationPlugin({
      name: 'marketing', // this name is used by the container to reference this module
      filename: 'remoteEntry.js', // this is the file that will be generated by this module
      exposes: { // this exposes the specified file to the container
        './MarketingApp': './src/bootstrap', // this exposes the bootstrap file in the src directory
      },
      shared: packageJson.dependencies, // this lets us share all of the dependencies in the package.json file
    }),
    new HtmlWebpackPlugin({
      template: './public/index.html', // tells the plugin where our html file is located
    }),
  ],
};

// merge the common config with the dev config, 
//listing devConfig last so that it overrides any commonConfig properties that are the same
module.exports = merge(commonConfig, devConfig);  